import com.android.build.gradle.AppExtension
import com.android.build.gradle.AppPlugin
import com.android.build.gradle.api.AndroidBasePlugin
import com.android.ide.common.xml.AndroidManifestParser
import org.xml.sax.SAXException

import javax.xml.parsers.ParserConfigurationException
import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.sax.SAXTransformerFactory
import javax.xml.transform.sax.TransformerHandler
import javax.xml.transform.stream.StreamResult

//引入自定义的插件
apply plugin: MyPlugin1


buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.4.2"
    }
}

//dependencies {
////    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation localGroovy()
////    implementation gradleApi()
////    implementation 'com.android.tools.build:gradle:3.3.2'
////    implementation 'com.sun.mail:android-mail:1.6.2'
////    implementation 'com.sun.mail:android-activation:1.6.2'
//}


/**
 * 这个插件的顺序在上面id 形式之后的， apply plugin: 放在下面,
 */
class MyPlugin1 implements Plugin<Project> {

    @Override
    void apply(Project project) {
        println '插件自定义111------ 直接在build中使用-- 开始=='
        try {
            project.getPlugins().hasPlugin("com.android.application")
        } catch (Exception e) {
            println("-我的-报错了--")
            project.getLogger().error("Failed to apply CheckExportedPlugin: ${e.message}")
            return
        }
        //task 直接通过task 方法挂上不行(不会执行的)，还得挂到某个task任务下
        def lxnTask  = project.task("lxnTaskExportes")
//        project.tasks.first().dependsOn(lxnTask)
        lxnTask.doLast {
            println("lxnTaskExportes---执行了-doLast--")
        }
        println("-我的-报错了=====--")

        //开启任务
        def mergeDebugResources = project.tasks.findByName("assemble")
        println("-mergeDebugResources===--"+mergeDebugResources)
        mergeDebugResources?.dependsOn(lxnTask)



        def checkExported = project.task("lxnExported")
        checkExported.description = "Check that all Android components have android:exported=\"false\" attribute"
        checkExported.group = "Verification"
        PatternFilterable filterable = new PatternSet().include("**/AndroidManifest.xml")
        checkExported.inputs.files(filterable)
        checkExported.outputs.upToDateWhen { false }
        checkExported.doLast {
            println("-doLast--")
            project.fileTree(".").matching(filterable).visit { FileVisitDetails details ->
                def manifestFile = details.file
                def components = extractComponentsFromManifest(manifestFile)
                // Print a warning message for each component that is not exported
                components.findAll { !it.exported }.each { component ->
                    project.getLogger().warn("Component '${component.name}' in '${manifestFile.name}' does not have android:exported=\"false\" attribute")
                }
            }
        }
        println '插件自定义1111------ 直接在build中使用的== 结束'
    }

    def extractComponentsFromManifest(File manifestFile) {
        def components = []

        try {
            SAXParserFactory parserFactory = SAXParserFactory.newInstance()
            parserFactory.setNamespaceAware(true)
            parserFactory.setFeature("http://xml.org/sax/features/external-general-entities", false)
            parserFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false)

            SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance()
            TransformerHandler transformerHandler = transformerFactory.newTransformerHandler()

            def manifestHandler = new AndroidManifestParser.ManifestHandler(components)
            transformerHandler.setResult(new StreamResult(manifestHandler))
            parserFactory.newSAXParser().parse(manifestFile, manifestHandler)
        } catch (ParserConfigurationException | SAXException e) {
            project.getLogger().error("Failed to parse manifest file: ${e.message}")
        }

        println("-我的---" + components)
    }
}
